/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  IsEnum,
  IsNumber,
  Min,
  Max,
  ValidateNested,
} from "class-validator";

import { EnumRestaurantCuisine } from "./EnumRestaurantCuisine";
import { ReservationUpdateManyWithoutRestaurantsInput } from "./ReservationUpdateManyWithoutRestaurantsInput";
import { Type } from "class-transformer";
import { ReviewUpdateManyWithoutRestaurantsInput } from "./ReviewUpdateManyWithoutRestaurantsInput";

@InputType()
class RestaurantUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumRestaurantCuisine,
    isArray: true,
  })
  @IsEnum(EnumRestaurantCuisine, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumRestaurantCuisine], {
    nullable: true,
  })
  cuisine?: Array<"Option1">;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  rating?: number | null;

  @ApiProperty({
    required: false,
    type: () => ReservationUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => ReservationUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => ReservationUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  reservations?: ReservationUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => ReviewUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => ReviewUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => ReviewUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  reviews?: ReviewUpdateManyWithoutRestaurantsInput;
}

export { RestaurantUpdateInput as RestaurantUpdateInput };
